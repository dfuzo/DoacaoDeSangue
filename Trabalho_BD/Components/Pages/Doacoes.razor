@page "/doacoes"
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject DoacaoService DoacaoService
@inject DoadorService DoadorService
@inject TipoSanguineoService TipoSanguineoService
@using System.Globalization
@using Trabalho_BD.Data.Models
@using Trabalho_BD.Data.Services

<PageTitle>Doações</PageTitle>

@if (doacoes == null)
{
    <p>Loading...</p>
}
else
{
    <div class="container mt-4">
        <h2 class="text-center mb-4">Gerenciamento de Doações</h2>

        <div class="card shadow p-4">
            <h4 class="mb-3">Lista de Doações</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>CPF Doador</th>
                            <th>Data Doação</th>
                            <th>Local</th>
                            <th>Volume</th>
                            <th>Tipo Sanguíneo</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var doacao in doacoes)
                        {
                            <tr>
                                <td>@doacao.IdDoacao</td>
                                <td>@doacao.IdDoador</td>
                                <td>@doacao.DataDoacao.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</td>
                                <td>@doacao.LocalDoacao</td>
                                <td>@doacao.VolumeColetado</td>
                                <td>
                                    @{
                                        var tipoNome = tipos.FirstOrDefault(t => t.IdTipoSanguineo == doacao.TipoSanguineo);
                                        if (tipoNome != null)
                                        {
                                            <text>@($"{tipoNome.Tipo} {tipoNome.FatorRh}")</text>
                                        }
                                        else
                                        {
                                            <text>@doacao.TipoSanguineo</text>
                                        }
                                    }
                                </td>
                                <td>
                                    <button @onclick="() => EditDoacao(doacao)" class="btn btn-warning btn-sm">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </button>
                                    <button @onclick="() => DeleteDoacao(doacao.IdDoacao)" class="btn btn-danger btn-sm">
                                        <i class="bi bi-trash"></i> Excluir
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card shadow p-4 mt-4">
            <h4 class="mb-3">Adicionar / Editar Doação</h4>
            <div class="col-md-6">
                <div class="mb-3">
                    <label>CPF Doador:</label>
                    <select @bind="selectedDoacao.IdDoador" class="form-control">
                        <option value="">-- Selecione o Doador --</option>
                        @foreach (var doador in doadores)
                        {
                            <option value="@doador.Cpf">@doador.Cpf - @doador.Nome</option>
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Data Doação:</label>
                    <input @bind="selectedDoacao.DataDoacao" type="date" class="form-control" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Local Doação:</label>
                    <input @bind="selectedDoacao.LocalDoacao" class="form-control" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Volume (mL):</label>
                    <input @bind="selectedDoacao.VolumeColetado" type="number" step="0.01" class="form-control" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Tipo Sanguíneo:</label>
                    <select @bind="selectedDoacao.TipoSanguineo" class="form-control">
                        <option value="">-- Selecione o tipo sanguíneo --</option>
                        @foreach (var tipo in tipos)
                        {
                            <option value="@tipo.IdTipoSanguineo">@tipo.Tipo @tipo.FatorRh</option>
                        }
                    </select>
                </div>
            </div>

            <div class="d-flex justify-content-end mt-3">
                <button @onclick="SaveDoacao" class="btn btn-success me-2">
                    <i class="bi bi-save"></i> Salvar
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<Doacao> doacoes = new();
    private List<Doador> doadores = new();
    private List<TipoSanguineo> tipos = new();  
    private Doacao selectedDoacao = new Doacao();

    protected override async Task OnInitializedAsync()
    {
        doacoes = await DoacaoService.GetDoacaosAsync();
        doadores = await DoadorService.GetDoadoresAsync();
        tipos = await TipoSanguineoService.GetTipoSanguineosAsync(); 
        Console.WriteLine("pagina carregada!");
    }

    private async Task SaveDoacao()
    {
        if (selectedDoacao.IdDoacao != 0)
        {
            await DoacaoService.UpdateDoacaoAsync(selectedDoacao);
        }
        else
        {
            await DoacaoService.AddDoacaoAsync(selectedDoacao);
        }

        _navigationManager.NavigateTo("/doacoes", forceLoad: true);
    }

    private void EditDoacao(Doacao doacao)
    {
        selectedDoacao = new Doacao
            {
                IdDoacao = doacao.IdDoacao,
                IdDoador = doacao.IdDoador,
                DataDoacao = doacao.DataDoacao,
                LocalDoacao = doacao.LocalDoacao,
                VolumeColetado = doacao.VolumeColetado,
                TipoSanguineo = doacao.TipoSanguineo
            };
    }

    private async Task DeleteDoacao(int id)
    {
        await DoacaoService.DeleteDoacaoAsync(id);
        doacoes = await DoacaoService.GetDoacaosAsync();
        StateHasChanged();
    }
}
