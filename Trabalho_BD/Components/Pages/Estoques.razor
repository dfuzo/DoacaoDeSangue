@page "/estoques"
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject EstoqueService EstoqueService
@inject HemocentroService HemocentroService
@using Trabalho_BD.Data.Models
@using Trabalho_BD.Data.Services

<PageTitle>Estoque</PageTitle>

@if (estoques == null)
{
    <p>Loading...</p>
}
else
{
    <div class="container mt-4">
        <h2 class="text-center mb-4">Gerenciamento de Estoque</h2>

        <div class="card shadow p-4">
            <h4 class="mb-3">Lista de Itens no Estoque</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle">
                    <thead class="table-dark">
                        <tr>
                            <th>ID Estoque</th>
                            <th>ID Hemocentro</th>
                            <th>Tipo de Item</th>
                            <th>Quantidade</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var estoque in estoques)
                        {
                            <tr>
                                <td>@estoque.IdEstoque</td>
                                <td>@estoque.IdHemocentro</td>
                                <td>@estoque.TipoItem</td>
                                <td>@estoque.Quantidade</td>
                                <td>
                                    <button @onclick="() => EditEstoque(estoque)" class="btn btn-warning btn-sm">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </button>
                                    <button @onclick="() => DeleteEstoque(estoque.IdEstoque)" class="btn btn-danger btn-sm">
                                        <i class="bi bi-trash"></i> Excluir
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card shadow p-4 mt-4">
            <h4 class="mb-3">Adicionar / Editar Estoque</h4>
            <div class="col-md-6">
                <label class="form-label">ID Hemocentro:</label>
                <input @bind="selectedEstoque.IdHemocentro" class="form-control" />
            </div>
            <div class="col-md-6">
                <label class="form-label">Tipo de Item:</label>
                <input @bind="selectedEstoque.TipoItem" class="form-control" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Quantidade:</label>
                <input @bind="selectedEstoque.Quantidade" type="number" class="form-control" />
            </div>

            <div class="d-flex justify-content-end mt-3">
                <button @onclick="SaveEstoque" class="btn btn-success me-2">
                    <i class="bi bi-save"></i> Salvar
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<Estoque> estoques = new();
    private Estoque selectedEstoque = new Estoque();

    protected override async Task OnInitializedAsync()
    {
        estoques = await EstoqueService.GetEstoquesAsync();
        Console.WriteLine("Página carregada!");
    }

    private async Task SaveEstoque()
    {
        if (selectedEstoque.IdEstoque != 0)
        {
            await EstoqueService.UpdateEstoqueAsync(selectedEstoque);
        }
        else
        {
            await EstoqueService.AddEstoqueAsync(selectedEstoque);
        }
        _navigationManager.NavigateTo("/estoques", forceLoad: true);
    }

    private void EditEstoque(Estoque estoque)
    {
        selectedEstoque = new Estoque
        {
            IdEstoque = estoque.IdEstoque,
            IdHemocentro = estoque.IdHemocentro,
            TipoItem = estoque.TipoItem,
            Quantidade = estoque.Quantidade
        };
    }

    private async Task DeleteEstoque(int id)
    {
        await EstoqueService.DeleteEstoqueAsync(id);
        estoques = await EstoqueService.GetEstoquesAsync();
        StateHasChanged();
    }
}
